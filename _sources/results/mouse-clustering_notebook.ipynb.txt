{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# CZI Mouse : Dimensionality Reduction and Clustering with SIMLR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Loading required package: ggplot2\n",
      "Loading required package: cowplot\n",
      "\n",
      "Attaching package: 'cowplot'\n",
      "\n",
      "The following object is masked from 'package:ggplot2':\n",
      "\n",
      "    ggsave\n",
      "\n",
      "Loading required package: Matrix\n",
      "Loading required package: SummarizedExperiment\n",
      "Loading required package: GenomicRanges\n",
      "Loading required package: stats4\n",
      "Loading required package: BiocGenerics\n",
      "Loading required package: parallel\n",
      "\n",
      "Attaching package: 'BiocGenerics'\n",
      "\n",
      "The following objects are masked from 'package:parallel':\n",
      "\n",
      "    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,\n",
      "    clusterExport, clusterMap, parApply, parCapply, parLapply,\n",
      "    parLapplyLB, parRapply, parSapply, parSapplyLB\n",
      "\n",
      "The following objects are masked from 'package:Matrix':\n",
      "\n",
      "    colMeans, colSums, rowMeans, rowSums, which\n",
      "\n",
      "The following objects are masked from 'package:stats':\n",
      "\n",
      "    IQR, mad, sd, var, xtabs\n",
      "\n",
      "The following objects are masked from 'package:base':\n",
      "\n",
      "    Filter, Find, Map, Position, Reduce, anyDuplicated, append,\n",
      "    as.data.frame, cbind, colMeans, colSums, colnames, do.call,\n",
      "    duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted,\n",
      "    lapply, lengths, mapply, match, mget, order, paste, pmax, pmax.int,\n",
      "    pmin, pmin.int, rank, rbind, rowMeans, rowSums, rownames, sapply,\n",
      "    setdiff, sort, table, tapply, union, unique, unsplit, which,\n",
      "    which.max, which.min\n",
      "\n",
      "Loading required package: S4Vectors\n",
      "\n",
      "Attaching package: 'S4Vectors'\n",
      "\n",
      "The following object is masked from 'package:Matrix':\n",
      "\n",
      "    expand\n",
      "\n",
      "The following object is masked from 'package:base':\n",
      "\n",
      "    expand.grid\n",
      "\n",
      "Loading required package: IRanges\n",
      "Loading required package: GenomeInfoDb\n"
     ]
    }
   ],
   "source": [
    "library(Seurat)\n",
    "library(MAST)\n",
    "library(DESeq2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Input"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true,
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "if(FALSE) {\n",
    "# X = as.matrix(read.csv(\"FILENAME\", row.names = 1, header= TRUE , sep='\\t'))\n",
    "exon_matrix = as.matrix(read.csv(\"./mouse/exon.counts.csv\", row.names = 1, header= TRUE , sep=',' ))\n",
    "intron_matrix = as.matrix(read.csv(\"./mouse/intron.counts.csv\", row.names = 1, header= TRUE , sep=',' ))\n",
    "\n",
    "mouse_matrix = exon_matrix+intron_matrix\n",
    "\n",
    "#mouse_counts = mouse_matrix[,c(1:20)]\n",
    "mouse_counts = mouse_matrix\n",
    "\n",
    "mouse_norm = sweep(mouse_counts,2,colSums(mouse_counts),`/`)\n",
    "\n",
    "mouse_tpm = 1e6*mouse_norm\n",
    "mouse_log = log2(mouse_tpm+1)\n",
    "\n",
    "mouse_matrix = mouse_log\n",
    "\n",
    "mouse_matrix <- mouse_matrix[,colSums(mouse_matrix != 0) != 0]\n",
    "\n",
    "saveRDS(mouse_matrix , file = \"mouse_matrix.Rdata\")\n",
    "#readRDS(\"results/edv_simlr_clustering_v2018-001-224952.Rdata\")\n",
    "}\n",
    "\n",
    "mouse_matrix = readRDS(file = \"mouse_matrix.Rdata\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Seurat pipeline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true,
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "seurat_object <- CreateSeuratObject(raw.data = mouse_matrix,  project = \"CZI\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "### Dimensionality reduction and clustering\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Performing analysis for the Mouse dataset \n",
      "Performing fast PCA.\n",
      "Performing k-nearest neighbour search.\n",
      "Computing the multiple Kernels.\n",
      "Performing the iterative procedure  10  times.\n",
      "Iteration:  1 \n",
      "Iteration:  2 \n",
      "Iteration:  3 \n",
      "Iteration:  4 \n",
      "Iteration:  5 \n",
      "Iteration:  6 \n",
      "Iteration:  7 \n",
      "Iteration:  8 \n",
      "Iteration:  9 \n",
      "Iteration:  10 \n",
      "Performing Kmeans.\n",
      "Performing t-SNE.\n",
      "The main loop will be now performed with a maximum of 300 iterations.\n",
      "Performing iteration 1.\n",
      "Performing iteration 2.\n",
      "Performing iteration 3.\n",
      "Performing iteration 4.\n",
      "Performing iteration 5.\n",
      "Performing iteration 6.\n",
      "Performing iteration 7.\n",
      "Performing iteration 8.\n",
      "Performing iteration 9.\n",
      "Performing iteration 10.\n",
      "Performing iteration 11.\n",
      "Performing iteration 12.\n",
      "Performing iteration 13.\n",
      "Performing iteration 14.\n",
      "Performing iteration 15.\n",
      "Performing iteration 16.\n",
      "Performing iteration 17.\n",
      "Performing iteration 18.\n",
      "Performing iteration 19.\n",
      "Performing iteration 20.\n",
      "Performing iteration 21.\n",
      "Performing iteration 22.\n",
      "Performing iteration 23.\n",
      "Performing iteration 24.\n",
      "Performing iteration 25.\n",
      "Performing iteration 26.\n",
      "Performing iteration 27.\n",
      "Performing iteration 28.\n",
      "Performing iteration 29.\n",
      "Performing iteration 30.\n",
      "Performing iteration 31.\n",
      "Performing iteration 32.\n",
      "Performing iteration 33.\n",
      "Performing iteration 34.\n",
      "Performing iteration 35.\n",
      "Performing iteration 36.\n",
      "Performing iteration 37.\n",
      "Performing iteration 38.\n",
      "Performing iteration 39.\n",
      "Performing iteration 40.\n",
      "Performing iteration 41.\n",
      "Performing iteration 42.\n",
      "Performing iteration 43.\n",
      "Performing iteration 44.\n",
      "Performing iteration 45.\n",
      "Performing iteration 46.\n",
      "Performing iteration 47.\n",
      "Performing iteration 48.\n",
      "Performing iteration 49.\n",
      "Performing iteration 50.\n",
      "Performing iteration 51.\n",
      "Performing iteration 52.\n",
      "Performing iteration 53.\n",
      "Performing iteration 54.\n",
      "Performing iteration 55.\n",
      "Performing iteration 56.\n",
      "Performing iteration 57.\n",
      "Performing iteration 58.\n",
      "Performing iteration 59.\n",
      "Performing iteration 60.\n",
      "Performing iteration 61.\n",
      "Performing iteration 62.\n",
      "Performing iteration 63.\n",
      "Performing iteration 64.\n",
      "Performing iteration 65.\n",
      "Performing iteration 66.\n",
      "Performing iteration 67.\n",
      "Performing iteration 68.\n",
      "Performing iteration 69.\n",
      "Performing iteration 70.\n",
      "Performing iteration 71.\n",
      "Performing iteration 72.\n",
      "Performing iteration 73.\n",
      "Performing iteration 74.\n",
      "Performing iteration 75.\n",
      "Performing iteration 76.\n",
      "Performing iteration 77.\n",
      "Performing iteration 78.\n",
      "Performing iteration 79.\n",
      "Performing iteration 80.\n",
      "Performing iteration 81.\n",
      "Performing iteration 82.\n",
      "Performing iteration 83.\n",
      "Performing iteration 84.\n",
      "Performing iteration 85.\n",
      "Performing iteration 86.\n",
      "Performing iteration 87.\n",
      "Performing iteration 88.\n",
      "Performing iteration 89.\n",
      "Performing iteration 90.\n",
      "Performing iteration 91.\n",
      "Performing iteration 92.\n",
      "Performing iteration 93.\n",
      "Performing iteration 94.\n",
      "Performing iteration 95.\n",
      "Performing iteration 96.\n",
      "Performing iteration 97.\n",
      "Performing iteration 98.\n",
      "Performing iteration 99.\n",
      "Performing iteration 100.\n",
      "Performing iteration 101.\n",
      "Performing iteration 102.\n",
      "Performing iteration 103.\n",
      "Performing iteration 104.\n",
      "Performing iteration 105.\n",
      "Performing iteration 106.\n",
      "Performing iteration 107.\n",
      "Performing iteration 108.\n",
      "Performing iteration 109.\n",
      "Performing iteration 110.\n",
      "Performing iteration 111.\n",
      "Performing iteration 112.\n",
      "Performing iteration 113.\n",
      "Performing iteration 114.\n",
      "Performing iteration 115.\n",
      "Performing iteration 116.\n",
      "Performing iteration 117.\n",
      "Performing iteration 118.\n",
      "Performing iteration 119.\n",
      "Performing iteration 120.\n",
      "Performing iteration 121.\n",
      "Performing iteration 122.\n",
      "Performing iteration 123.\n",
      "Performing iteration 124.\n",
      "Performing iteration 125.\n",
      "Performing iteration 126.\n",
      "Performing iteration 127.\n",
      "Performing iteration 128.\n",
      "Performing iteration 129.\n",
      "Performing iteration 130.\n",
      "Performing iteration 131.\n",
      "Performing iteration 132.\n",
      "Performing iteration 133.\n",
      "Performing iteration 134.\n",
      "Performing iteration 135.\n",
      "Performing iteration 136.\n",
      "Performing iteration 137.\n",
      "Performing iteration 138.\n",
      "Performing iteration 139.\n",
      "Performing iteration 140.\n",
      "Performing iteration 141.\n",
      "Performing iteration 142.\n",
      "Performing iteration 143.\n",
      "Performing iteration 144.\n",
      "Performing iteration 145.\n",
      "Performing iteration 146.\n",
      "Performing iteration 147.\n",
      "Performing iteration 148.\n",
      "Performing iteration 149.\n",
      "Performing iteration 150.\n",
      "Performing iteration 151.\n",
      "Performing iteration 152.\n",
      "Performing iteration 153.\n",
      "Performing iteration 154.\n",
      "Performing iteration 155.\n",
      "Performing iteration 156.\n",
      "Performing iteration 157.\n",
      "Performing iteration 158.\n",
      "Performing iteration 159.\n",
      "Performing iteration 160.\n",
      "Performing iteration 161.\n",
      "Performing iteration 162.\n",
      "Performing iteration 163.\n",
      "Performing iteration 164.\n",
      "Performing iteration 165.\n",
      "Performing iteration 166.\n",
      "Performing iteration 167.\n",
      "Performing iteration 168.\n",
      "Performing iteration 169.\n",
      "Performing iteration 170.\n",
      "Performing iteration 171.\n",
      "Performing iteration 172.\n",
      "Performing iteration 173.\n",
      "Performing iteration 174.\n",
      "Performing iteration 175.\n",
      "Performing iteration 176.\n",
      "Performing iteration 177.\n",
      "Performing iteration 178.\n",
      "Performing iteration 179.\n",
      "Performing iteration 180.\n",
      "Performing iteration 181.\n",
      "Performing iteration 182.\n",
      "Performing iteration 183.\n",
      "Performing iteration 184.\n",
      "Performing iteration 185.\n",
      "Performing iteration 186.\n",
      "Performing iteration 187.\n",
      "Performing iteration 188.\n",
      "Performing iteration 189.\n",
      "Performing iteration 190.\n",
      "Performing iteration 191.\n",
      "Performing iteration 192.\n",
      "Performing iteration 193.\n",
      "Performing iteration 194.\n",
      "Performing iteration 195.\n",
      "Performing iteration 196.\n",
      "Performing iteration 197.\n",
      "Performing iteration 198.\n",
      "Performing iteration 199.\n",
      "Performing iteration 200.\n",
      "Performing iteration 201.\n",
      "Performing iteration 202.\n",
      "Performing iteration 203.\n",
      "Performing iteration 204.\n",
      "Performing iteration 205.\n",
      "Performing iteration 206.\n",
      "Performing iteration 207.\n",
      "Performing iteration 208.\n",
      "Performing iteration 209.\n",
      "Performing iteration 210.\n",
      "Performing iteration 211.\n",
      "Performing iteration 212.\n",
      "Performing iteration 213.\n",
      "Performing iteration 214.\n",
      "Performing iteration 215.\n",
      "Performing iteration 216.\n",
      "Performing iteration 217.\n",
      "Performing iteration 218.\n",
      "Performing iteration 219.\n",
      "Performing iteration 220.\n",
      "Performing iteration 221.\n",
      "Performing iteration 222.\n",
      "Performing iteration 223.\n",
      "Performing iteration 224.\n",
      "Performing iteration 225.\n",
      "Performing iteration 226.\n",
      "Performing iteration 227.\n",
      "Performing iteration 228.\n",
      "Performing iteration 229.\n",
      "Performing iteration 230.\n",
      "Performing iteration 231.\n",
      "Performing iteration 232.\n",
      "Performing iteration 233.\n",
      "Performing iteration 234.\n",
      "Performing iteration 235.\n",
      "Performing iteration 236.\n",
      "Performing iteration 237.\n",
      "Performing iteration 238.\n",
      "Performing iteration 239.\n",
      "Performing iteration 240.\n",
      "Performing iteration 241.\n",
      "Performing iteration 242.\n",
      "Performing iteration 243.\n",
      "Performing iteration 244.\n",
      "Performing iteration 245.\n",
      "Performing iteration 246.\n",
      "Performing iteration 247.\n",
      "Performing iteration 248.\n",
      "Performing iteration 249.\n",
      "Performing iteration 250.\n",
      "Performing iteration 251.\n",
      "Performing iteration 252.\n",
      "Performing iteration 253.\n",
      "Performing iteration 254.\n",
      "Performing iteration 255.\n",
      "Performing iteration 256.\n",
      "Performing iteration 257.\n",
      "Performing iteration 258.\n",
      "Performing iteration 259.\n",
      "Performing iteration 260.\n",
      "Performing iteration 261.\n",
      "Performing iteration 262.\n",
      "Performing iteration 263.\n",
      "Performing iteration 264.\n",
      "Performing iteration 265.\n",
      "Performing iteration 266.\n",
      "Performing iteration 267.\n",
      "Performing iteration 268.\n",
      "Performing iteration 269.\n",
      "Performing iteration 270.\n",
      "Performing iteration 271.\n",
      "Performing iteration 272.\n",
      "Performing iteration 273.\n",
      "Performing iteration 274.\n",
      "Performing iteration 275.\n",
      "Performing iteration 276.\n",
      "Performing iteration 277.\n",
      "Performing iteration 278.\n",
      "Performing iteration 279.\n",
      "Performing iteration 280.\n",
      "Performing iteration 281.\n",
      "Performing iteration 282.\n",
      "Performing iteration 283.\n",
      "Performing iteration 284.\n",
      "Performing iteration 285.\n",
      "Performing iteration 286.\n",
      "Performing iteration 287.\n",
      "Performing iteration 288.\n",
      "Performing iteration 289.\n",
      "Performing iteration 290.\n",
      "Performing iteration 291.\n",
      "Performing iteration 292.\n",
      "Performing iteration 293.\n",
      "Performing iteration 294.\n",
      "Performing iteration 295.\n",
      "Performing iteration 296.\n",
      "Performing iteration 297.\n",
      "Performing iteration 298.\n",
      "Performing iteration 299.\n",
      "Performing iteration 300.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<strong>png:</strong> 2"
      ],
      "text/latex": [
       "\\textbf{png:} 2"
      ],
      "text/markdown": [
       "**png:** 2"
      ],
      "text/plain": [
       "png \n",
       "  2 "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "n_clust = 50 \n",
    "set.seed(11111)\n",
    "cat(\"Performing analysis for the Mouse dataset\",\"\\n\")\n",
    "#res_large_scale = SIMLR_Large_Scale(X=mouse_matrix,c=n_clust,k=30,kk=200)\n",
    "res_large_scale = SIMLR_Large_Scale(X=mouse_matrix,c=n_clust,k=30,kk=200)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "path <- \"results/edv_simlr_clustering_v\" \n",
    "time <- format(Sys.time(), format = \"%Y-%j-%H%M%S\") \n",
    "\n",
    "\n",
    "saveRDS(res_large_scale , file = paste0(path, time , \".RData\"))\n",
    "\n",
    "pdf(file=paste0(path, time , \".pdf\")) \n",
    "# make the scatterd plots\n",
    "plot(res_large_scale$ydata,col=c(colors(n_clust))[res_large_scale$y$cluster],xlab=\"SIMLR component 1\", ylab=\"SIMLR component 2\",pch=20,main=\"SIMILR 2D visualization for Zelsel\")\n",
    "dev.off() \n",
    "\n",
    "#readRDS(\"results/edv_simlr_clustering_v2018-001-224952.Rdata\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Looking for 140 clusters \n",
    "Since that is the number in the cl.csv example file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {
    "collapsed": true,
    "scrolled": true,
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "results=readRDS(\"results/edv_simlr_clustering_n50_v2018-006-033053.RData\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {
    "collapsed": true,
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "results$y = kmeans(results$F,140,nstart=200)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {
    "scrolled": false,
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "Plot with title \"SIMILR 2D visualization for CZI Mouse - 140 clusters\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot(results$ydata,col=c(colors(140))[results$y$cluster],xlab=\"SIMLR component 1\", ylab=\"SIMLR component 2\",pch=20,main=\"SIMILR 2D visualization for CZI Mouse - 140 clusters\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Louvain Clustering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {
    "scrolled": true,
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ol class=list-inline>\n",
       "\t<li>'y'</li>\n",
       "\t<li>'S0'</li>\n",
       "\t<li>'F'</li>\n",
       "\t<li>'ydata'</li>\n",
       "\t<li>'alphaK'</li>\n",
       "\t<li>'val'</li>\n",
       "\t<li>'ind'</li>\n",
       "\t<li>'execution.time'</li>\n",
       "</ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 'y'\n",
       "\\item 'S0'\n",
       "\\item 'F'\n",
       "\\item 'ydata'\n",
       "\\item 'alphaK'\n",
       "\\item 'val'\n",
       "\\item 'ind'\n",
       "\\item 'execution.time'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 'y'\n",
       "2. 'S0'\n",
       "3. 'F'\n",
       "4. 'ydata'\n",
       "5. 'alphaK'\n",
       "6. 'val'\n",
       "7. 'ind'\n",
       "8. 'execution.time'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] \"y\"              \"S0\"             \"F\"              \"ydata\"         \n",
       "[5] \"alphaK\"         \"val\"            \"ind\"            \"execution.time\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "'integer'"
      ],
      "text/latex": [
       "'integer'"
      ],
      "text/markdown": [
       "'integer'"
      ],
      "text/plain": [
       "[1] \"integer\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "names(results)\n",
    "\n",
    "class(results$y$cluster)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {
    "collapsed": true,
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "library(Seurat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {
    "collapsed": true,
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "mouse_matrix = readRDS(file = \"mouse_matrix.Rdata\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {
    "collapsed": true,
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "czi_mouse_simlr <- CreateSeuratObject(raw.data = mouse_matrix,  project = \"CZI\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " num [1:21749, 1:66] -1.29e-11 9.91e-08 1.18e-09 9.89e-08 1.45e-09 ...\n"
     ]
    }
   ],
   "source": [
    "simlr_embeddings = results$F\n",
    "str(simlr_embeddings)\n",
    "row.names(simlr_embeddings) = colnames(mouse_matrix)\n",
    "colnames(x = simlr_embeddings) <- paste0(\"SIMLR\", 1:dim(simlr_embeddings)[2])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " chr [1:21749] \"LS.14690_S02_E1.50\" \"LS.14690_S03_E1.50\" ...\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<ol class=list-inline>\n",
       "\t<li>21749</li>\n",
       "\t<li>66</li>\n",
       "</ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 21749\n",
       "\\item 66\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 21749\n",
       "2. 66\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 21749    66"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "str(colnames(mouse_matrix))\n",
    "dim(simlr_embeddings)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " num [1:45768, 1:21749] 0 0 5.14 6.62 0 ...\n",
      " - attr(*, \"dimnames\")=List of 2\n",
      "  ..$ : chr [1:45768] \"0610005C13Rik\" \"0610006L08Rik\" \"0610007P14Rik\" \"0610009B22Rik\" ...\n",
      "  ..$ : chr [1:21749] \"LS.14690_S02_E1.50\" \"LS.14690_S03_E1.50\" \"LS.14690_S05_E1.50\" \"LS.14690_S06_E1.50\" ...\n",
      " num [1:21749, 1:66] -1.29e-11 9.91e-08 1.18e-09 9.89e-08 1.45e-09 ...\n",
      " - attr(*, \"dimnames\")=List of 2\n",
      "  ..$ : chr [1:21749] \"LS.14690_S02_E1.50\" \"LS.14690_S03_E1.50\" \"LS.14690_S05_E1.50\" \"LS.14690_S06_E1.50\" ...\n",
      "  ..$ : chr [1:66] \"SIMLR1\" \"SIMLR2\" \"SIMLR3\" \"SIMLR4\" ...\n"
     ]
    }
   ],
   "source": [
    "str(mouse_matrix)\n",
    "str(simlr_embeddings)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Formal class 'seurat' [package \"Seurat\"] with 20 slots\n",
      "  ..@ raw.data    : num [1:45768, 1:21749] 0 0 5.14 6.62 0 ...\n",
      "  .. ..- attr(*, \"dimnames\")=List of 2\n",
      "  .. .. ..$ : chr [1:45768] \"0610005C13Rik\" \"0610006L08Rik\" \"0610007P14Rik\" \"0610009B22Rik\" ...\n",
      "  .. .. ..$ : chr [1:21749] \"LS.14690_S02_E1.50\" \"LS.14690_S03_E1.50\" \"LS.14690_S05_E1.50\" \"LS.14690_S06_E1.50\" ...\n",
      "  ..@ data        : num [1:45768, 1:21749] 0 0 5.14 6.62 0 ...\n",
      "  .. ..- attr(*, \"dimnames\")=List of 2\n",
      "  .. .. ..$ : chr [1:45768] \"0610005C13Rik\" \"0610006L08Rik\" \"0610007P14Rik\" \"0610009B22Rik\" ...\n",
      "  .. .. ..$ : chr [1:21749] \"LS.14690_S02_E1.50\" \"LS.14690_S03_E1.50\" \"LS.14690_S05_E1.50\" \"LS.14690_S06_E1.50\" ...\n",
      "  ..@ scale.data  : NULL\n",
      "  ..@ var.genes   : logi(0) \n",
      "  ..@ is.expr     : num 0\n",
      "  ..@ ident       : Factor w/ 66 levels \"0\",\"1\",\"2\",\"3\",..: 12 28 4 28 4 4 4 1 2 4 ...\n",
      "  .. ..- attr(*, \"names\")= chr [1:21749] \"LS.14690_S02_E1.50\" \"LS.14690_S03_E1.50\" \"LS.14690_S05_E1.50\" \"LS.14690_S06_E1.50\" ...\n",
      "  ..@ meta.data   :'data.frame':\t21749 obs. of  4 variables:\n",
      "  .. ..$ nGene     : num [1:21749] 9886 9553 9530 9824 9119 ...\n",
      "  .. ..$ nUMI      : num [1:21749] 47293 45988 47797 47255 44531 ...\n",
      "  .. ..$ orig.ident: Factor w/ 1 level \"CZI\": 1 1 1 1 1 1 1 1 1 1 ...\n",
      "  .. ..$ res.0.8   : chr [1:21749] \"11\" \"27\" \"3\" \"27\" ...\n",
      "  ..@ project.name: chr \"CZI\"\n",
      "  ..@ dr          :List of 1\n",
      "  .. ..$ simlr:Formal class 'dim.reduction' [package \"Seurat\"] with 7 slots\n",
      "  .. .. .. ..@ cell.embeddings   : num [1:21749, 1:66] -1.29e-11 9.91e-08 1.18e-09 9.89e-08 1.45e-09 ...\n",
      "  .. .. .. .. ..- attr(*, \"dimnames\")=List of 2\n",
      "  .. .. .. .. .. ..$ : chr [1:21749] \"LS.14690_S02_E1.50\" \"LS.14690_S03_E1.50\" \"LS.14690_S05_E1.50\" \"LS.14690_S06_E1.50\" ...\n",
      "  .. .. .. .. .. ..$ : chr [1:66] \"SIMLR1\" \"SIMLR2\" \"SIMLR3\" \"SIMLR4\" ...\n",
      "  .. .. .. ..@ gene.loadings     : num[0 , 0 ] \n",
      "  .. .. .. ..@ gene.loadings.full: num[0 , 0 ] \n",
      "  .. .. .. ..@ sdev              : num(0) \n",
      "  .. .. .. ..@ key               : chr \"SIMLR\"\n",
      "  .. .. .. ..@ jackstraw         : NULL\n",
      "  .. .. .. ..@ misc              : NULL\n",
      "  ..@ assay       : list()\n",
      "  ..@ hvg.info    :'data.frame':\t0 obs. of  0 variables\n",
      "Formal class 'data.frame' [package \"methods\"] with 4 slots\n",
      "  .. .. ..@ .Data    : list()\n",
      "  .. .. ..@ names    : chr(0) \n",
      "  .. .. ..@ row.names: int(0) \n",
      "  .. .. ..@ .S3Class : chr \"data.frame\"\n",
      "  ..@ imputed     :'data.frame':\t0 obs. of  0 variables\n",
      "Formal class 'data.frame' [package \"methods\"] with 4 slots\n",
      "  .. .. ..@ .Data    : list()\n",
      "  .. .. ..@ names    : chr(0) \n",
      "  .. .. ..@ row.names: int(0) \n",
      "  .. .. ..@ .S3Class : chr \"data.frame\"\n",
      "  ..@ cell.names  : chr [1:21749] \"LS.14690_S02_E1.50\" \"LS.14690_S03_E1.50\" \"LS.14690_S05_E1.50\" \"LS.14690_S06_E1.50\" ...\n",
      "  ..@ cluster.tree: list()\n",
      "  ..@ snn         :Formal class 'dgCMatrix' [package \"Matrix\"] with 6 slots\n",
      "  .. .. ..@ i       : int [1:1474225] 0 121 912 980 1509 1527 1547 1974 3132 4140 ...\n",
      "  .. .. ..@ p       : int [1:21750] 0 64 120 200 251 327 382 447 522 619 ...\n",
      "  .. .. ..@ Dim     : int [1:2] 21749 21749\n",
      "  .. .. ..@ Dimnames:List of 2\n",
      "  .. .. .. ..$ : chr [1:21749] \"LS.14690_S02_E1.50\" \"LS.14690_S03_E1.50\" \"LS.14690_S05_E1.50\" \"LS.14690_S06_E1.50\" ...\n",
      "  .. .. .. ..$ : chr [1:21749] \"LS.14690_S02_E1.50\" \"LS.14690_S03_E1.50\" \"LS.14690_S05_E1.50\" \"LS.14690_S06_E1.50\" ...\n",
      "  .. .. ..@ x       : num [1:1474225] 1 0.132 0.5 0.333 0.364 ...\n",
      "  .. .. ..@ factors : list()\n",
      "  ..@ calc.params :List of 3\n",
      "  .. ..$ CreateSeuratObject  :List of 13\n",
      "  .. .. ..$ project             : chr \"CZI\"\n",
      "  .. .. ..$ min.cells           : num 0\n",
      "  .. .. ..$ min.genes           : num 0\n",
      "  .. .. ..$ is.expr             : num 0\n",
      "  .. .. ..$ normalization.method: NULL\n",
      "  .. .. ..$ scale.factor        : num 10000\n",
      "  .. .. ..$ do.scale            : logi FALSE\n",
      "  .. .. ..$ do.center           : logi FALSE\n",
      "  .. .. ..$ names.field         : num 1\n",
      "  .. .. ..$ names.delim         : chr \"_\"\n",
      "  .. .. ..$ save.raw            : logi TRUE\n",
      "  .. .. ..$ display.progress    : logi TRUE\n",
      "  .. .. ..$ time                : POSIXct[1:1], format: \"2018-01-08 21:27:05\"\n",
      "  .. ..$ BuildSNN            :List of 9\n",
      "  .. .. ..$ genes.use     : NULL\n",
      "  .. .. ..$ reduction.type: chr \"simlr\"\n",
      "  .. .. ..$ dims.use      : int [1:50] 1 2 3 4 5 6 7 8 9 10 ...\n",
      "  .. .. ..$ k.param       : num 30\n",
      "  .. .. ..$ k.scale       : num 25\n",
      "  .. .. ..$ plot.SNN      : logi FALSE\n",
      "  .. .. ..$ prune.SNN     : num 0.0667\n",
      "  .. .. ..$ force.recalc  : logi FALSE\n",
      "  .. .. ..$ time          : POSIXct[1:1], format: \"2018-01-08 21:33:36\"\n",
      "  .. ..$ FindClusters.res.0.8:List of 20\n",
      "  .. .. ..$ genes.use         : NULL\n",
      "  .. .. ..$ reduction.type    : chr \"simlr\"\n",
      "  .. .. ..$ dims.use          : int [1:50] 1 2 3 4 5 6 7 8 9 10 ...\n",
      "  .. .. ..$ k.param           : num 30\n",
      "  .. .. ..$ k.scale           : num 25\n",
      "  .. .. ..$ plot.SNN          : logi FALSE\n",
      "  .. .. ..$ prune.SNN         : num 0.0667\n",
      "  .. .. ..$ print.output      : logi TRUE\n",
      "  .. .. ..$ distance.matrix   : NULL\n",
      "  .. .. ..$ save.SNN          : logi TRUE\n",
      "  .. .. ..$ reuse.SNN         : logi FALSE\n",
      "  .. .. ..$ force.recalc      : logi FALSE\n",
      "  .. .. ..$ modularity.fxn    : num 1\n",
      "  .. .. ..$ resolution        : num 0.8\n",
      "  .. .. ..$ algorithm         : num 1\n",
      "  .. .. ..$ n.start           : num 100\n",
      "  .. .. ..$ n.iter            : num 10\n",
      "  .. .. ..$ random.seed       : num 0\n",
      "  .. .. ..$ temp.file.location: NULL\n",
      "  .. .. ..$ time              : POSIXct[1:1], format: \"2018-01-08 21:46:20\"\n",
      "  ..@ kmeans      : NULL\n",
      "  ..@ spatial     :Formal class 'spatial.info' [package \"Seurat\"] with 4 slots\n",
      "  .. .. ..@ mix.probs    :'data.frame':\t21749 obs. of  1 variable:\n",
      "  .. .. .. ..$ nGene: num [1:21749] 9886 9553 9530 9824 9119 ...\n",
      "  .. .. ..@ mix.param    :'data.frame':\t0 obs. of  0 variables\n",
      "Formal class 'data.frame' [package \"methods\"] with 4 slots\n",
      "  .. .. .. .. ..@ .Data    : list()\n",
      "  .. .. .. .. ..@ names    : chr(0) \n",
      "  .. .. .. .. ..@ row.names: int(0) \n",
      "  .. .. .. .. ..@ .S3Class : chr \"data.frame\"\n",
      "  .. .. ..@ final.prob   :'data.frame':\t0 obs. of  0 variables\n",
      "Formal class 'data.frame' [package \"methods\"] with 4 slots\n",
      "  .. .. .. .. ..@ .Data    : list()\n",
      "  .. .. .. .. ..@ names    : chr(0) \n",
      "  .. .. .. .. ..@ row.names: int(0) \n",
      "  .. .. .. .. ..@ .S3Class : chr \"data.frame\"\n",
      "  .. .. ..@ insitu.matrix:'data.frame':\t0 obs. of  0 variables\n",
      "Formal class 'data.frame' [package \"methods\"] with 4 slots\n",
      "  .. .. .. .. ..@ .Data    : list()\n",
      "  .. .. .. .. ..@ names    : chr(0) \n",
      "  .. .. .. .. ..@ row.names: int(0) \n",
      "  .. .. .. .. ..@ .S3Class : chr \"data.frame\"\n",
      "  ..@ misc        : NULL\n",
      "  ..@ version     :Classes 'package_version', 'numeric_version'  hidden list of 1\n",
      "  .. ..$ : int [1:3] 2 1 0\n"
     ]
    }
   ],
   "source": [
    "\n",
    "czi_mouse_simlr <- SetDimReduction(object = czi_mouse_simlr, reduction.type = \"simlr\", slot = \"cell.embeddings\", \n",
    "    new.data = simlr_embeddings)\n",
    "czi_mouse_simlr <- SetDimReduction(object = czi_mouse_simlr, reduction.type = \"simlr\", slot = \"key\", \n",
    "    new.data = \"SIMLR\")\n",
    "\n",
    "str(czi_mouse_simlr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1] \"Constructing SNN\"\n",
      "  |======================================================================| 100%\n"
     ]
    }
   ],
   "source": [
    "czi_mouse_simlr <- FindClusters(czi_mouse_simlr, reduction.type = \"simlr\", dims.use = 1:50, save.SNN = T , force.recalc =TRUE)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Formal class 'seurat' [package \"Seurat\"] with 20 slots\n",
      "  ..@ raw.data    : num [1:45768, 1:21749] 0 0 5.14 6.62 0 ...\n",
      "  .. ..- attr(*, \"dimnames\")=List of 2\n",
      "  .. .. ..$ : chr [1:45768] \"0610005C13Rik\" \"0610006L08Rik\" \"0610007P14Rik\" \"0610009B22Rik\" ...\n",
      "  .. .. ..$ : chr [1:21749] \"LS.14690_S02_E1.50\" \"LS.14690_S03_E1.50\" \"LS.14690_S05_E1.50\" \"LS.14690_S06_E1.50\" ...\n",
      "  ..@ data        : num [1:45768, 1:21749] 0 0 5.14 6.62 0 ...\n",
      "  .. ..- attr(*, \"dimnames\")=List of 2\n",
      "  .. .. ..$ : chr [1:45768] \"0610005C13Rik\" \"0610006L08Rik\" \"0610007P14Rik\" \"0610009B22Rik\" ...\n",
      "  .. .. ..$ : chr [1:21749] \"LS.14690_S02_E1.50\" \"LS.14690_S03_E1.50\" \"LS.14690_S05_E1.50\" \"LS.14690_S06_E1.50\" ...\n",
      "  ..@ scale.data  : NULL\n",
      "  ..@ var.genes   : logi(0) \n",
      "  ..@ is.expr     : num 0\n",
      "  ..@ ident       : Factor w/ 73 levels \"0\",\"1\",\"2\",\"3\",..: 51 11 4 11 4 4 4 14 6 4 ...\n",
      "  .. ..- attr(*, \"names\")= chr [1:21749] \"LS.14690_S02_E1.50\" \"LS.14690_S03_E1.50\" \"LS.14690_S05_E1.50\" \"LS.14690_S06_E1.50\" ...\n",
      "  ..@ meta.data   :'data.frame':\t21749 obs. of  4 variables:\n",
      "  .. ..$ nGene     : num [1:21749] 9886 9553 9530 9824 9119 ...\n",
      "  .. ..$ nUMI      : num [1:21749] 47293 45988 47797 47255 44531 ...\n",
      "  .. ..$ orig.ident: Factor w/ 1 level \"CZI\": 1 1 1 1 1 1 1 1 1 1 ...\n",
      "  .. ..$ res.0.8   : chr [1:21749] \"50\" \"10\" \"3\" \"10\" ...\n",
      "  ..@ project.name: chr \"CZI\"\n",
      "  ..@ dr          :List of 1\n",
      "  .. ..$ simlr:Formal class 'dim.reduction' [package \"Seurat\"] with 7 slots\n",
      "  .. .. .. ..@ cell.embeddings   : num [1:21749, 1:66] -1.29e-11 9.91e-08 1.18e-09 9.89e-08 1.45e-09 ...\n",
      "  .. .. .. .. ..- attr(*, \"dimnames\")=List of 2\n",
      "  .. .. .. .. .. ..$ : chr [1:21749] \"LS.14690_S02_E1.50\" \"LS.14690_S03_E1.50\" \"LS.14690_S05_E1.50\" \"LS.14690_S06_E1.50\" ...\n",
      "  .. .. .. .. .. ..$ : chr [1:66] \"SIMLR1\" \"SIMLR2\" \"SIMLR3\" \"SIMLR4\" ...\n",
      "  .. .. .. ..@ gene.loadings     : num[0 , 0 ] \n",
      "  .. .. .. ..@ gene.loadings.full: num[0 , 0 ] \n",
      "  .. .. .. ..@ sdev              : num(0) \n",
      "  .. .. .. ..@ key               : chr \"SIMLR\"\n",
      "  .. .. .. ..@ jackstraw         : NULL\n",
      "  .. .. .. ..@ misc              : NULL\n",
      "  ..@ assay       : list()\n",
      "  ..@ hvg.info    :'data.frame':\t0 obs. of  0 variables\n",
      "Formal class 'data.frame' [package \"methods\"] with 4 slots\n",
      "  .. .. ..@ .Data    : list()\n",
      "  .. .. ..@ names    : chr(0) \n",
      "  .. .. ..@ row.names: int(0) \n",
      "  .. .. ..@ .S3Class : chr \"data.frame\"\n",
      "  ..@ imputed     :'data.frame':\t0 obs. of  0 variables\n",
      "Formal class 'data.frame' [package \"methods\"] with 4 slots\n",
      "  .. .. ..@ .Data    : list()\n",
      "  .. .. ..@ names    : chr(0) \n",
      "  .. .. ..@ row.names: int(0) \n",
      "  .. .. ..@ .S3Class : chr \"data.frame\"\n",
      "  ..@ cell.names  : chr [1:21749] \"LS.14690_S02_E1.50\" \"LS.14690_S03_E1.50\" \"LS.14690_S05_E1.50\" \"LS.14690_S06_E1.50\" ...\n",
      "  ..@ cluster.tree: list()\n",
      "  ..@ snn         :Formal class 'dgCMatrix' [package \"Matrix\"] with 6 slots\n",
      "  .. .. ..@ i       : int [1:1471978] 0 696 906 980 1509 1527 1547 1974 2606 3030 ...\n",
      "  .. .. ..@ p       : int [1:21750] 0 78 144 225 283 353 428 502 590 682 ...\n",
      "  .. .. ..@ Dim     : int [1:2] 21749 21749\n",
      "  .. .. ..@ Dimnames:List of 2\n",
      "  .. .. .. ..$ : chr [1:21749] \"LS.14690_S02_E1.50\" \"LS.14690_S03_E1.50\" \"LS.14690_S05_E1.50\" \"LS.14690_S06_E1.50\" ...\n",
      "  .. .. .. ..$ : chr [1:21749] \"LS.14690_S02_E1.50\" \"LS.14690_S03_E1.50\" \"LS.14690_S05_E1.50\" \"LS.14690_S06_E1.50\" ...\n",
      "  .. .. ..@ x       : num [1:1471978] 1 0.5789 0.3636 0.0909 0.0714 ...\n",
      "  .. .. ..@ factors : list()\n",
      "  ..@ calc.params :List of 3\n",
      "  .. ..$ CreateSeuratObject  :List of 13\n",
      "  .. .. ..$ project             : chr \"CZI\"\n",
      "  .. .. ..$ min.cells           : num 0\n",
      "  .. .. ..$ min.genes           : num 0\n",
      "  .. .. ..$ is.expr             : num 0\n",
      "  .. .. ..$ normalization.method: NULL\n",
      "  .. .. ..$ scale.factor        : num 10000\n",
      "  .. .. ..$ do.scale            : logi FALSE\n",
      "  .. .. ..$ do.center           : logi FALSE\n",
      "  .. .. ..$ names.field         : num 1\n",
      "  .. .. ..$ names.delim         : chr \"_\"\n",
      "  .. .. ..$ save.raw            : logi TRUE\n",
      "  .. .. ..$ display.progress    : logi TRUE\n",
      "  .. .. ..$ time                : POSIXct[1:1], format: \"2018-01-08 21:27:05\"\n",
      "  .. ..$ BuildSNN            :List of 9\n",
      "  .. .. ..$ genes.use     : NULL\n",
      "  .. .. ..$ reduction.type: chr \"simlr\"\n",
      "  .. .. ..$ dims.use      : int [1:50] 1 2 3 4 5 6 7 8 9 10 ...\n",
      "  .. .. ..$ k.param       : num 30\n",
      "  .. .. ..$ k.scale       : num 25\n",
      "  .. .. ..$ plot.SNN      : logi FALSE\n",
      "  .. .. ..$ prune.SNN     : num 0.0667\n",
      "  .. .. ..$ force.recalc  : logi TRUE\n",
      "  .. .. ..$ time          : POSIXct[1:1], format: \"2018-01-08 21:50:52\"\n",
      "  .. ..$ FindClusters.res.0.8:List of 20\n",
      "  .. .. ..$ genes.use         : NULL\n",
      "  .. .. ..$ reduction.type    : chr \"simlr\"\n",
      "  .. .. ..$ dims.use          : int [1:50] 1 2 3 4 5 6 7 8 9 10 ...\n",
      "  .. .. ..$ k.param           : num 30\n",
      "  .. .. ..$ k.scale           : num 25\n",
      "  .. .. ..$ plot.SNN          : logi FALSE\n",
      "  .. .. ..$ prune.SNN         : num 0.0667\n",
      "  .. .. ..$ print.output      : logi TRUE\n",
      "  .. .. ..$ distance.matrix   : NULL\n",
      "  .. .. ..$ save.SNN          : logi TRUE\n",
      "  .. .. ..$ reuse.SNN         : logi FALSE\n",
      "  .. .. ..$ force.recalc      : logi TRUE\n",
      "  .. .. ..$ modularity.fxn    : num 1\n",
      "  .. .. ..$ resolution        : num 0.8\n",
      "  .. .. ..$ algorithm         : num 1\n",
      "  .. .. ..$ n.start           : num 100\n",
      "  .. .. ..$ n.iter            : num 10\n",
      "  .. .. ..$ random.seed       : num 0\n",
      "  .. .. ..$ temp.file.location: NULL\n",
      "  .. .. ..$ time              : POSIXct[1:1], format: \"2018-01-08 22:02:57\"\n",
      "  ..@ kmeans      : NULL\n",
      "  ..@ spatial     :Formal class 'spatial.info' [package \"Seurat\"] with 4 slots\n",
      "  .. .. ..@ mix.probs    :'data.frame':\t21749 obs. of  1 variable:\n",
      "  .. .. .. ..$ nGene: num [1:21749] 9886 9553 9530 9824 9119 ...\n",
      "  .. .. ..@ mix.param    :'data.frame':\t0 obs. of  0 variables\n",
      "Formal class 'data.frame' [package \"methods\"] with 4 slots\n",
      "  .. .. .. .. ..@ .Data    : list()\n",
      "  .. .. .. .. ..@ names    : chr(0) \n",
      "  .. .. .. .. ..@ row.names: int(0) \n",
      "  .. .. .. .. ..@ .S3Class : chr \"data.frame\"\n",
      "  .. .. ..@ final.prob   :'data.frame':\t0 obs. of  0 variables\n",
      "Formal class 'data.frame' [package \"methods\"] with 4 slots\n",
      "  .. .. .. .. ..@ .Data    : list()\n",
      "  .. .. .. .. ..@ names    : chr(0) \n",
      "  .. .. .. .. ..@ row.names: int(0) \n",
      "  .. .. .. .. ..@ .S3Class : chr \"data.frame\"\n",
      "  .. .. ..@ insitu.matrix:'data.frame':\t0 obs. of  0 variables\n",
      "Formal class 'data.frame' [package \"methods\"] with 4 slots\n",
      "  .. .. .. .. ..@ .Data    : list()\n",
      "  .. .. .. .. ..@ names    : chr(0) \n",
      "  .. .. .. .. ..@ row.names: int(0) \n",
      "  .. .. .. .. ..@ .S3Class : chr \"data.frame\"\n",
      "  ..@ misc        : NULL\n",
      "  ..@ version     :Classes 'package_version', 'numeric_version'  hidden list of 1\n",
      "  .. ..$ : int [1:3] 2 1 0\n"
     ]
    }
   ],
   "source": [
    "str(czi_mouse_simlr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {
    "scrolled": true,
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "IOPub data rate exceeded.\n",
      "The notebook server will temporarily stop sending output\n",
      "to the client in order to avoid crashing it.\n",
      "To change this limit, set the config variable\n",
      "`--NotebookApp.iopub_data_rate_limit`.\n"
     ]
    }
   ],
   "source": [
    "(czi_mouse_simlr@ident)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "plot(results$ydata,col=c(colors(73))[czi_mouse_simlr@ident],xlab=\"SIMLR component 1\", ylab=\"SIMLR component 2\",pch=20,main=\"SIMILR 2D visualization for CZI Mouse - Graph Clustering\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "R",
   "language": "R",
   "name": "ir"
  },
  "language_info": {
   "codemirror_mode": "r",
   "file_extension": ".r",
   "mimetype": "text/x-r-source",
   "name": "R",
   "pygments_lexer": "r",
   "version": "4.0.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
